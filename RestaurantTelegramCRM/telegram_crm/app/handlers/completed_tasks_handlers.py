from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InputMediaPhoto

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ deadline_keyboards.py
from app.keyboards.deadline_keyboars import create_deadline_keyboard, calculate_deadline_from_callback

from app.services.task_service import TaskService
from app.keyboards.select_complete_tasks_keyboards import build_completed_tasks_keyboard
from app.keyboards.task_reply_keyboard import get_chek_task_action_keyboard

completed_tasks_router = Router()


class TaskCheckUpdateStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_deadline = State()  # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏ –¥–ª—è callback, –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞


@completed_tasks_router.message(F.text == "‚ùå –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É")
async def start_chek_task(message: Message, state: FSMContext):
    user_data = await state.get_data()
    task_id = user_data.get('current_task_id')
    if not task_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    refine_task = await TaskService.get_task_by_id(task_id)
    if not refine_task:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    await state.update_data(
        original_task_id=task_id,
        original_title=refine_task.title,
        original_description=refine_task.description,
        original_deadline=refine_task.deadline,
        original_executor_id=refine_task.executor_id,
        original_manager_id=refine_task.manager_id
    )

    new_title = f"(–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å!) {refine_task.title}"
    await state.update_data(new_title=new_title)

    await message.answer(
        f"–ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥ —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º: {new_title}\n"
        f"\n"
        f"–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:\n"
    )
    await state.set_state(TaskCheckUpdateStates.waiting_for_description)


@completed_tasks_router.message(TaskCheckUpdateStates.waiting_for_description)
async def process_new_description(message: Message, state: FSMContext):
    input_description = message.text

    user_data = await state.get_data()
    original_description = user_data.get('original_description', '')

    new_description = f"\n–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n{input_description}\n\n–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{original_description}"
    await state.update_data(new_description=new_description)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã
    deadline_kb = create_deadline_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=deadline_kb)
    await state.set_state(TaskCheckUpdateStates.waiting_for_deadline)


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CallbackQuery —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
@completed_tasks_router.callback_query(StateFilter(TaskCheckUpdateStates.waiting_for_deadline),
                                       lambda c: c.data and c.data.startswith('deadline:'))
async def process_deadline_callback_for_refinement(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏."""
    await callback_query.answer()

    user_data = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    manager_id = user_data.get('original_manager_id')
    executor_id = user_data.get('original_executor_id')
    new_title = user_data.get('new_title')
    new_description = user_data.get('new_description')

    if not all([manager_id, new_title, new_description]):  # executor_id –º–æ–∂–µ—Ç –±—ã—Ç—å None
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    data = callback_query.data

    if data == "deadline:manual":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 22:30"
        )
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è TaskCheckUpdateStates.waiting_for_deadline,
        # —Ç–µ–ø–µ—Ä—å –±—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –∏–∑ callback_data
    new_deadline = calculate_deadline_from_callback(data)

    # --- –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ---
    # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ user_data –∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω—ã (new_deadline)
    result = await TaskService.create_new_task(
        manager_id=manager_id,
        executor_id=executor_id,
        title=new_title,
        description=new_description,
        deadline=new_deadline  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π deadline –∏–ª–∏ None
    )

    if result['success']:
        original_task_id = user_data.get('original_task_id')
        if original_task_id:
            await TaskService.delete_task_for_task_id(original_task_id)
        await callback_query.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text
    else:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text

    await state.clear()


@completed_tasks_router.message(TaskCheckUpdateStates.waiting_for_deadline)
async def process_new_deadline_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏."""
    input_deadline = message.text.strip()
    try:
        new_deadline = datetime.strptime(input_deadline, "%d.%m.%Y - %H:%M")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É
        kemerovo_tz = ZoneInfo("Asia/Krasnoyarsk")
        new_deadline = new_deadline.replace(tzinfo=kemerovo_tz)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 22:30")
        return

    user_data = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    manager_id = user_data.get('original_manager_id')
    executor_id = user_data.get('original_executor_id')
    new_title = user_data.get('new_title')
    new_description = user_data.get('new_description')

    if not all([manager_id, new_title, new_description]):  # executor_id –º–æ–∂–µ—Ç –±—ã—Ç—å None
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    # --- –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (–∫–∞–∫ –≤ callback —Ö–µ–Ω–¥–ª–µ—Ä–µ) ---
    result = await TaskService.create_new_task(
        manager_id=manager_id,
        executor_id=executor_id,
        title=new_title,
        description=new_description,
        deadline=new_deadline  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é –¥–∞—Ç—É
    )

    if result['success']:
        original_task_id = user_data.get('original_task_id')
        if original_task_id:
            await TaskService.delete_task_for_task_id(original_task_id)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")

    await state.clear()


@completed_tasks_router.message(F.text == "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞")
async def close_task(message: Message, state: FSMContext):
    user_data = await state.get_data()
    task_id = user_data.get('current_task_id')

    if task_id:
        await TaskService.delete_task_for_task_id(task_id)
        await message.answer(
            f"–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞–¥–∞—á—É!\n"
            f"–ó–∞–¥–∞—á–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n",
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.")

    await state.clear()
    await get_completed_task(message)


@completed_tasks_router.message(F.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
async def close_check_task(message: Message):
    await get_completed_task(message)


@completed_tasks_router.message(Command("completed_tasks"))
async def get_completed_task(message: Message):
    completed_tasks = await TaskService.get_completed_tasks()

    if not completed_tasks:
        await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç")
        return

    keyboard = build_completed_tasks_keyboard(completed_tasks)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=keyboard)


@completed_tasks_router.callback_query(lambda c: c.data and c.data.startswith('select_completed_tasks:'))
async def get_completed_task_by_id(callback_query: CallbackQuery, state: FSMContext):
    task_id_str = callback_query.data.split(':')[1]
    task_id = int(task_id_str)

    await state.update_data(current_task_id=task_id)

    task = await TaskService.get_task_by_id_and_staff(task_id)
    if not task:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback_query.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deadline –∏ completed_at —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ None
    kemerovo_tz = ZoneInfo("Asia/Krasnoyarsk")

    if task.deadline is not None:
        if task.deadline.tzinfo is None:
            deadline_with_tz = task.deadline.replace(tzinfo=kemerovo_tz)
        else:
            deadline_with_tz = task.deadline.astimezone(kemerovo_tz)
        deadline_str = deadline_with_tz.strftime("%d.%m.%Y %H:%M")
    else:
        deadline_str = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"

    if task.completed_at is not None:
        if task.completed_at.tzinfo is None:
            completed_at_with_tz = task.completed_at.replace(tzinfo=kemerovo_tz)
        else:
            completed_at_with_tz = task.completed_at.astimezone(kemerovo_tz)
        completed_at_str = completed_at_with_tz.strftime("%d.%m.%Y %H:%M")
    else:
        # completed_at –æ–±—ã—á–Ω–æ –Ω–µ None –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        completed_at_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if task.executor:
        executor_info = f"{task.executor.full_name} - {task.executor.position}"
    else:
        executor_info = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

    response_text = (
        f"¬´{task.title}¬ª\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task.description}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        f"\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {executor_info}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_at_str}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:\n"
        f"{task.comment or '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω'}\n"
    )

    if task.photo_url:
        photo_urls = [url.strip() for url in task.photo_url.split(',') if url.strip()]

        if photo_urls:
            if len(photo_urls) == 1:
                await callback_query.message.answer_photo(photo=photo_urls[0], caption=response_text)
            else:
                media_group = [InputMediaPhoto(media=url, caption=response_text if i == 0 else None) for i, url in
                               enumerate(photo_urls)]
                await callback_query.message.answer_media_group(media=media_group)
        else:
            await callback_query.message.answer(response_text)
    else:
        await callback_query.message.answer(response_text)

    chek_keyboard = get_chek_task_action_keyboard()
    await callback_query.message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–∞–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ\n"
        "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ - –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "‚ùå –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª",
        reply_markup=chek_keyboard
    )
    await callback_query.answer()

