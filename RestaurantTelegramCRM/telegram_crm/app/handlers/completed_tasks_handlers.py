import asyncio
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InputMediaPhoto

from app.services.task_service import TaskService
from app.keyboards.select_complete_tasks_keyboards import build_completed_tasks_keyboard
from app.keyboards.task_reply_keyboard import get_chek_task_action_keyboard


completed_tasks_router = Router()


class TaskCheckStates(StatesGroup):
    task_id = State()


class TaskCheckUpdateStates(StatesGroup):
    new_description = State()
    new_deadline = State()


@completed_tasks_router.message(TaskCheckStates.task_id, F.text == "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞")
async def close_task(message: Message, state: FSMContext):
    task_id_state = await state.get_data()
    task_id = list(task_id_state.values())[0]
    await TaskService.delete_task_for_task_id(task_id)
    await message.answer(
        f"–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞–¥–∞—á—É!\n"
        f"–ó–∞–¥–∞—á–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n",
    )


@completed_tasks_router.message(TaskCheckStates.task_id, F.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
async def close_check_task(message: Message):
    await get_completed_task(message)


@completed_tasks_router.message(Command("completed_tasks"))
async def get_completed_task(message: Message):
    completed_tasks = await TaskService.get_completed_tasks()

    if not completed_tasks:
        await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç")
        return

    keyboard = build_completed_tasks_keyboard(completed_tasks)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=keyboard)


@completed_tasks_router.callback_query(lambda c: c.data and c.data.startswith('select_completed_tasks:'))
async def get_completed_task_by_id(callback_query: CallbackQuery, state: FSMContext):
    task_id_str = callback_query.data.split(':')[1]
    task_id = int(task_id_str)

    task = await TaskService.get_task_by_id_and_staff(task_id)

    await state.update_data(task_id=task_id)

    kemerovo_tz = ZoneInfo("Asia/Krasnoyarsk")
    deadline_with_tz = task.deadline.replace(tzinfo=kemerovo_tz)
    completed_at_with_tz = task.completed_at.replace(tzinfo=kemerovo_tz)

    deadline_str = deadline_with_tz.strftime("%d.%m.%Y %H:%M")
    completed_at_str = completed_at_with_tz.strftime("%d.%m.%Y %H:%M")
    response_text = (
        f"¬´{task.title}¬ª\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task.description}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        f"\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {task.executor.full_name} - {task.executor.position}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_at_str}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:\n"
        f"{task.comment or '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω'}\n"
    )

    if task.photo_url:
        photo_urls = [url.strip() for url in task.photo_url.split(',') if url.strip()]

        if photo_urls:
            if len(photo_urls) == 1:
                await callback_query.message.answer_photo(photo=photo_urls[0], caption=response_text)
            else:
                media_group = [InputMediaPhoto(media=url, caption=response_text if i == 0 else None) for i, url in
                               enumerate(photo_urls)]
                await callback_query.message.answer_media_group(media=media_group)

        else:
            await callback_query.message.answer(response_text)
    else:
        await callback_query.message.answer(response_text)

    chek_keyboard = get_chek_task_action_keyboard()
    await callback_query.message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–∞–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ\n"
        "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ - –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "‚ùå –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª",
        reply_markup=chek_keyboard
    )
    await state.set_state(TaskCheckStates.task_id)
    await callback_query.answer()



