from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from app.keyboards.deadline_keyboars import create_deadline_keyboard, calculate_deadline_from_callback

from app.keyboards.change_task_keyboars import build_delete_tasks_keyboard, build_update_tasks_keyboard
from app.keyboards.task_reply_keyboard import get_update_task_action_keyboard
from app.services.task_service import TaskService
from app.services.user_service import UserService
from core.models import SectorStatus

change_task_router = Router()


class TaskDeleteUpdateStates(StatesGroup):
    waiting_for_task_id = State()
    waiting_for_confirmation = State()


class UpdateTaskStates(StatesGroup):
    waiting_for_field_choice = State()
    waiting_for_new_value = State()
    waiting_for_continue = State()
    waiting_for_sector_choice = State()


def format_deadline(deadline: datetime | None) -> str:
    if deadline is None:
        return "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"

    kemerovo_tz = ZoneInfo("Asia/Krasnoyarsk")
    if deadline.tzinfo is None:
        deadline_with_tz = deadline.replace(tzinfo=kemerovo_tz)
    else:
        deadline_with_tz = deadline.astimezone(kemerovo_tz)

    return deadline_with_tz.strftime('%d.%m.%Y - %H:%M')


@change_task_router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: Message):
    tasks = await TaskService.get_all_task()
    task_keyboard = build_delete_tasks_keyboard(tasks)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=task_keyboard)


@change_task_router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
async def change_task(message: Message, state: FSMContext):
    tasks = await TaskService.get_all_task()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        return
    task_keyboard = build_update_tasks_keyboard(tasks)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=task_keyboard)
    await state.set_state(UpdateTaskStates.waiting_for_field_choice)


@change_task_router.callback_query(lambda c: c.data and c.data.startswith('update_task:'))
async def start_change_task(callback_query: CallbackQuery, state: FSMContext):
    task_id_str = callback_query.data.split(':')[1]
    task_id = int(task_id_str)
    selected_task = await TaskService.get_task_by_id(task_id)

    await state.update_data(task_id=task_id)

    if selected_task.executor:
        executor_info = f"{selected_task.executor.full_name} - {selected_task.executor.position}"
    else:
        if selected_task.sector_task:
            sector_names = {
                SectorStatus.BAR: "–ë–∞—Ä",
                SectorStatus.HALL: "–ó–∞–ª",
                SectorStatus.KITCHEN: "–ö—É—Ö–Ω—è"
            }
            sector_name = sector_names.get(selected_task.sector_task, str(selected_task.sector_task))
            executor_info = f"–í–µ—Å—å —Å–µ–∫—Ç–æ—Ä ({sector_name})"
        else:
            executor_info = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

    deadline_str = format_deadline(selected_task.deadline)

    task_info = (
        f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {selected_task.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {selected_task.description}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_info}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
    )

    await callback_query.message.answer(task_info)
    await callback_query.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        "1 - –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "2 - –û–ø–∏—Å–∞–Ω–∏–µ\n"
        "3 - –°–æ—Ç—Ä—É–¥–Ω–∏–∫\n"
        "4 - –î–µ–¥–ª–∞–π–Ω\n"
        "5 - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–∫—Ç–æ—Ä—É (—Å–Ω—è—Ç—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)\n"
        "6 - –û—Ç–º–µ–Ω–∞\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —á–∏—Å–ª–æ"
    )
    await state.set_state(UpdateTaskStates.waiting_for_field_choice)
    await callback_query.answer()


@change_task_router.message(UpdateTaskStates.waiting_for_field_choice)
async def process_field_choice(message: Message, state: FSMContext):
    field_map = {
        '1': 'title',
        '2': 'description',
        '3': 'executor',
        '4': 'deadline',
        '5': 'sector_assignment',
        '6': 'cancel'
    }

    if message.text not in field_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
        return

    field = field_map[message.text]
    await state.update_data(field_to_update=field)

    if field == 'cancel':
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await show_all_tasks(message)
        return
    elif field == 'sector_assignment':
        sector_keyboard = create_sector_selection_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É:", reply_markup=sector_keyboard)
        await state.set_state(UpdateTaskStates.waiting_for_sector_choice)
    elif field == 'deadline':
        deadline_kb = create_deadline_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=deadline_kb)
        await state.set_state(UpdateTaskStates.waiting_for_new_value)
    else:
        field_names = {
            'title': '–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
            'description': '–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
            'executor': '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ Telegram ID)',
        }

        if field == 'executor':
            employees = await UserService.get_all_users()
            if employees:
                employee_list = "\n".join([
                    f"{emp.telegram_id} - {emp.full_name} ({emp.position})"
                    for emp in employees
                ])
                await message.answer(
                    f"–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
                    f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n{employee_list}"
                )
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        else:
            field_name = field_names[field]
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_name}:")
        await state.set_state(UpdateTaskStates.waiting_for_new_value)


@change_task_router.callback_query(StateFilter(UpdateTaskStates.waiting_for_new_value),
                                   lambda c: c.data and c.data.startswith('deadline:'))
async def process_deadline_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()

    user_data = await state.get_data()
    task_id = user_data.get('task_id')
    field_to_update = user_data.get('field_to_update')

    if not task_id or field_to_update != 'deadline':
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    data = callback_query.data

    if data == "deadline:manual":
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 22:30"
        )
        return

    new_deadline = calculate_deadline_from_callback(data)

    result = await TaskService.update_task_field(task_id, 'deadline', new_deadline)

    if result["success"]:
        updated_task = await TaskService.get_task_by_id(task_id)

        if updated_task.executor:
            executor_info = f"{updated_task.executor.full_name} - {updated_task.executor.position}"
        else:
            if updated_task.sector_task:
                sector_names = {
                    SectorStatus.BAR: "–ë–∞—Ä",
                    SectorStatus.HALL: "–ó–∞–ª",
                    SectorStatus.KITCHEN: "–ö—É—Ö–Ω—è"
                }
                sector_name = sector_names.get(updated_task.sector_task, str(updated_task.sector_task))
                executor_info = f"–í–µ—Å—å —Å–µ–∫—Ç–æ—Ä ({sector_name})"
            else:
                executor_info = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        deadline_str = format_deadline(updated_task.deadline)

        await callback_query.message.edit_text(
            f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {updated_task.title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {updated_task.description}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_info}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        )

        await callback_query.message.answer(
            "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ?\n"
            "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
        await state.set_state(UpdateTaskStates.waiting_for_continue)
    else:
        await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {result['message']}")
        await state.clear()


async def show_all_tasks(message: Message):
    tasks = await TaskService.get_all_task()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        return

    task_keyboard = build_update_tasks_keyboard(tasks)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=task_keyboard)


def create_sector_selection_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton(text="üç∏ –ë–∞—Ä", callback_data="sector:bar")],
        [InlineKeyboardButton(text="üçΩÔ∏è –ó–∞–ª", callback_data="sector:hall")],
        [InlineKeyboardButton(text="üë®‚Äçüç≥ –ö—É—Ö–Ω—è", callback_data="sector:kitchen")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sector:cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@change_task_router.callback_query(UpdateTaskStates.waiting_for_sector_choice)
async def process_sector_choice(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    task_id = user_data.get('task_id')

    if callback_query.data == "sector:cancel":
        await callback_query.message.answer("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä—É –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.set_state(UpdateTaskStates.waiting_for_field_choice)
        selected_task = await TaskService.get_task_by_id(task_id)

        if selected_task.executor:
            executor_info = f"{selected_task.executor.full_name} - {selected_task.executor.position}"
        else:
            if selected_task.sector_task:
                sector_names = {
                    SectorStatus.BAR: "–ë–∞—Ä",
                    SectorStatus.HALL: "–ó–∞–ª",
                    SectorStatus.KITCHEN: "–ö—É—Ö–Ω—è"
                }
                sector_name = sector_names.get(selected_task.sector_task, str(selected_task.sector_task))
                executor_info = f"–í–µ—Å—å —Å–µ–∫—Ç–æ—Ä ({sector_name})"
            else:
                executor_info = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        deadline_str = format_deadline(selected_task.deadline)

        task_info = (
            f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {selected_task.title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {selected_task.description}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_info}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        )

        await callback_query.message.answer(task_info)
        await callback_query.message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
            "1 - –ù–∞–∑–≤–∞–Ω–∏–µ\n"
            "2 - –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "3 - –°–æ—Ç—Ä—É–¥–Ω–∏–∫\n"
            "4 - –î–µ–¥–ª–∞–π–Ω\n"
            "5 - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–∫—Ç–æ—Ä—É (—Å–Ω—è—Ç—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)\n"
            "6 - –û—Ç–º–µ–Ω–∞\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —á–∏—Å–ª–æ"
        )
        await callback_query.answer()
        return

    sector_map = {
        "sector:bar": SectorStatus.BAR,
        "sector:hall": SectorStatus.HALL,
        "sector:kitchen": SectorStatus.KITCHEN
    }

    sector = sector_map.get(callback_query.data)

    if not sector:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ–∫—Ç–æ—Ä–∞.", show_alert=True)
        return

    result = await TaskService.update_task_field(task_id, 'sector_task', sector)  # –ü–µ—Ä–µ–¥–∞–µ–º Enum

    if result["success"]:
        updated_task = await TaskService.get_task_by_id(task_id)

        sector_names = {
            SectorStatus.BAR: "–ë–∞—Ä",
            SectorStatus.HALL: "–ó–∞–ª",
            SectorStatus.KITCHEN: "–ö—É—Ö–Ω—è"
        }
        sector_name = sector_names.get(sector, str(sector))

        deadline_str = format_deadline(updated_task.deadline)

        await callback_query.message.answer(
            f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {updated_task.title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {updated_task.description}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –í–µ—Å—å —Å–µ–∫—Ç–æ—Ä ({sector_name})\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        )

        await callback_query.message.answer(
            "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ?\n"
            "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
        await state.set_state(UpdateTaskStates.waiting_for_continue)
    else:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {result['message']}")
        await state.clear()

    await callback_query.answer()


@change_task_router.message(UpdateTaskStates.waiting_for_new_value)
async def process_new_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    task_id = user_data.get('task_id')
    field_to_update = user_data.get('field_to_update')

    if not task_id or not field_to_update:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    try:
        new_value = message.text

        if field_to_update == 'title':
            if len(new_value.strip()) == 0:
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
        elif field_to_update == 'executor':
            try:
                new_value = int(new_value)
                employee = await UserService.get_user_by_telegram_id(new_value)
                if not employee:
                    await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                await TaskService.update_task_field(task_id, 'sector_task', None)
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ)")
                return
        elif field_to_update == 'deadline':
            try:
                deadline_dt = datetime.strptime(new_value, "%d.%m.%Y - %H:%M")
                kemerovo_tz = ZoneInfo("Asia/Krasnoyarsk")
                new_value = deadline_dt.replace(tzinfo=kemerovo_tz)
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2025 - 22:30")
                return
        else:
            pass

        result = await TaskService.update_task_field(task_id, field_to_update, new_value)

        if result["success"]:
            updated_task = await TaskService.get_task_by_id(task_id)

            if updated_task.executor:
                executor_info = f"{updated_task.executor.full_name} - {updated_task.executor.position}"
            else:
                if updated_task.sector_task:
                    sector_names = {
                        SectorStatus.BAR: "–ë–∞—Ä",
                        SectorStatus.HALL: "–ó–∞–ª",
                        SectorStatus.KITCHEN: "–ö—É—Ö–Ω—è"
                    }
                    sector_name = sector_names.get(updated_task.sector_task, str(updated_task.sector_task))
                    executor_info = f"–í–µ—Å—å —Å–µ–∫—Ç–æ—Ä ({sector_name})"
                else:
                    executor_info = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

            deadline_str = format_deadline(updated_task.deadline)

            await message.answer(
                f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {updated_task.title}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {updated_task.description}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_info}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
            )

            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ?\n"
                "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )
            await state.set_state(UpdateTaskStates.waiting_for_continue)
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {result['message']}")
            await state.clear()

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@change_task_router.message(UpdateTaskStates.waiting_for_continue)
async def process_continue_editing(message: Message, state: FSMContext):
    user_data = await state.get_data()
    task_id = user_data.get('task_id')

    if message.text.lower() in ['–¥–∞', 'yes', 'y']:
        selected_task = await TaskService.get_task_by_id(task_id)

        if selected_task.executor:
            executor_info = f"{selected_task.executor.full_name} - {selected_task.executor.position}"
        else:
            if selected_task.sector_task:
                sector_names = {
                    SectorStatus.BAR: "–ë–∞—Ä",
                    SectorStatus.HALL: "–ó–∞–ª",
                    SectorStatus.KITCHEN: "–ö—É—Ö–Ω—è"
                }
                sector_name = sector_names.get(selected_task.sector_task, str(selected_task.sector_task))
                executor_info = f"–í–µ—Å—å —Å–µ–∫—Ç–æ—Ä ({sector_name})"
            else:
                executor_info = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        deadline_str = format_deadline(selected_task.deadline)

        task_info = (
            f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {selected_task.title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {selected_task.description}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_info}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        )

        await message.answer(task_info)
        await message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
            "1 - –ù–∞–∑–≤–∞–Ω–∏–µ\n"
            "2 - –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "3 - –°–æ—Ç—Ä—É–¥–Ω–∏–∫\n"
            "4 - –î–µ–¥–ª–∞–π–Ω\n"
            "5 - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–∫—Ç–æ—Ä—É (—Å–Ω—è—Ç—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)\n"
            "6 - –û—Ç–º–µ–Ω–∞\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —á–∏—Å–ª–æ"
        )
        await state.set_state(UpdateTaskStates.waiting_for_field_choice)

    elif message.text.lower() in ['–Ω–µ—Ç', 'no', 'n']:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        await state.clear()
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )


@change_task_router.callback_query(lambda c: c.data and c.data.startswith('delete_task:'))
async def start_delete_task(callback_query: CallbackQuery, state: FSMContext):
    task_id_str = callback_query.data.split(':')[1]
    task_id = int(task_id_str)
    selected_task = await TaskService.get_task_by_id(task_id)

    if selected_task.executor:
        executor_info = f"{selected_task.executor.full_name} - {selected_task.executor.position}"
    else:
        if selected_task.sector_task:
            sector_names = {
                SectorStatus.BAR: "–ë–∞—Ä",
                SectorStatus.HALL: "–ó–∞–ª",
                SectorStatus.KITCHEN: "–ö—É—Ö–Ω—è"
            }
            sector_name = sector_names.get(selected_task.sector_task, str(selected_task.sector_task))
            executor_info = f"–í–µ—Å—å —Å–µ–∫—Ç–æ—Ä ({sector_name})"
        else:
            executor_info = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

    deadline_str = format_deadline(selected_task.deadline)

    await callback_query.message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {selected_task.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {selected_task.description}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_info}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
    )
    await callback_query.message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ:\n"
        "–¥–∞ - –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã\n"
        "–Ω–µ—Ç - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
    )
    await state.update_data(waiting_for_task_id=selected_task.task_id)
    await state.set_state(TaskDeleteUpdateStates.waiting_for_confirmation)


@change_task_router.message(TaskDeleteUpdateStates.waiting_for_confirmation)
async def process_delete_task(message: Message, state: FSMContext):
    task_date = await state.get_data()
    delete_task_id = task_date.get('waiting_for_task_id')
    waiting_for_confirmation = message.text

    if waiting_for_confirmation == "–¥–∞":
        await TaskService.delete_task_for_task_id(delete_task_id)
        await message.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
        await get_change_task_keyboard(message)
    elif waiting_for_confirmation == "–Ω–µ—Ç":
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ:\n"
            "–¥–∞ - –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã\n"
            "–Ω–µ—Ç - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
        )
    await state.clear()


@change_task_router.message(Command("change_task"))
async def get_change_task_keyboard(message: Message):
    keyboard = get_update_task_action_keyboard()
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏", reply_markup=keyboard)