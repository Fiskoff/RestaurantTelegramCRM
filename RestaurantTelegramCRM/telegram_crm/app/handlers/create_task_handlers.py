from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.task_service import TaskService
from app.keyboards.create_task_keyboards import create_employee_selection_keyboard, create_sector_selection_keyboard
from core.models.base_model import SectorStatus
from app.keyboards.deadline_keyboars import create_deadline_keyboard, calculate_deadline_from_callback

create_task_router = Router()


class CreateTask(StatesGroup):
    waiting_for_assignment_type = State()
    waiting_for_executor_id = State()
    waiting_for_sector = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_deadline = State()


@create_task_router.message(Command("create_task"))
async def start_create_task(message: Message, state: FSMContext):
    manager_id = message.from_user.id
    await state.update_data(manager_id=manager_id)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="assignment:employee")],
        [InlineKeyboardButton(text="üè¢ –í—Å–µ–º—É —Å–µ–∫—Ç–æ—Ä—É", callback_data="assignment:sector")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", callback_data="assignment:cancel")]
    ])

    await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=keyboard)
    await state.set_state(CreateTask.waiting_for_assignment_type)


@create_task_router.callback_query(lambda c: c.data and c.data.startswith('assignment:'))
async def process_assignment_type(callback_query: CallbackQuery, state: FSMContext):
    assignment_type = callback_query.data.split(':')[1]

    if assignment_type == "employee":
        keyboard = await create_employee_selection_keyboard()
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É:",
                                               reply_markup=keyboard)
        await state.set_state(CreateTask.waiting_for_executor_id)
    elif assignment_type == "sector":
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üç∏ –ë–∞—Ä", callback_data="select_sector:bar")],
            [InlineKeyboardButton(text="üçΩÔ∏è –ó–∞–ª", callback_data="select_sector:hall")],
            [InlineKeyboardButton(text="‚Äçüë®‚Äçüç≥ –ö—É—Ö–Ω—è", callback_data="select_sector:kitchen")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="select_sector:cancel")]
        ])

        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É:",
                                               reply_markup=keyboard)
        await state.set_state(CreateTask.waiting_for_sector)
    elif assignment_type == "cancel":
        await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        await state.clear()

    await callback_query.answer()


# –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º callback
# @create_task_router.message(CreateTask.waiting_for_assignment_type)
# async def process_assignment_type(message: Message, state: FSMContext):
#     # ... —Å—Ç–∞—Ä—ã–π –∫–æ–¥ ...


@create_task_router.callback_query(lambda c: c.data and c.data.startswith('select_employee:'))
async def process_employee_selection(callback_query: CallbackQuery, state: FSMContext):
    try:
        executor_id_str = callback_query.data.split(':')[1]
        executor_id = int(executor_id_str)
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", show_alert=True)
        return

    await state.update_data(executor_id=executor_id)
    await state.update_data(sector_task=None)
    await callback_query.answer()
    await callback_query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    await state.set_state(CreateTask.waiting_for_title)


@create_task_router.callback_query(lambda c: c.data and c.data.startswith('select_sector:'))
async def process_sector_selection(callback_query: CallbackQuery, state: FSMContext):
    try:
        sector_str = callback_query.data.split(':')[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ç–º–µ–Ω—É
        if sector_str == "cancel":
            await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
            await state.clear()
            await callback_query.answer()
            return

        sector_map = {
            "bar": SectorStatus.BAR,
            "hall": SectorStatus.HALL,
            "kitchen": SectorStatus.KITCHEN
        }
        sector = sector_map.get(sector_str)

        if not sector:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞.", show_alert=True)
            return

        await state.update_data(sector_task=sector)
        await state.update_data(executor_id=None)
        await callback_query.answer()
        await callback_query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        await state.set_state(CreateTask.waiting_for_title)
    except (IndexError, ValueError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞.", show_alert=True)
        return


# –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º callback
# @create_task_router.message(CreateTask.waiting_for_executor_id)
# async def process_executor(message: Message, state: FSMContext):
#     # ... —Å—Ç–∞—Ä—ã–π –∫–æ–¥ ...


@create_task_router.message(CreateTask.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(title=title)
    await message.answer("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?")
    await state.set_state(CreateTask.waiting_for_description)


@create_task_router.message(CreateTask.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)

    keyboard = create_deadline_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    await state.set_state(CreateTask.waiting_for_deadline)


@create_task_router.callback_query(StateFilter(CreateTask.waiting_for_deadline))
async def process_deadline_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()

    data = callback_query.data
    user_id = callback_query.from_user.id

    if data == "deadline:manual":
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 22:30"
        )
        return

    deadline_dt = calculate_deadline_from_callback(data)

    if data == "deadline:never":
        await state.update_data(deadline=None)
        await callback_query.message.edit_text("–í—ã–±—Ä–∞–Ω —Å—Ä–æ–∫: –ë–µ—Å—Å—Ä–æ—á–Ω–æ")
    elif deadline_dt:
        await state.update_data(deadline=deadline_dt)
        await callback_query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω —Å—Ä–æ–∫: {deadline_dt.strftime('%d.%m.%Y - %H:%M')}")
    else:
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    task_data = await state.get_data()

    manager_id = task_data["manager_id"]
    executor_id = task_data.get("executor_id")
    sector_task = task_data.get("sector_task")
    title = task_data["title"]
    description = task_data["description"]

    result = await TaskService.create_new_task(
        manager_id=manager_id,
        executor_id=executor_id,
        title=title,
        description=description,
        deadline=deadline_dt,
        sector_task=sector_task
    )

    await state.clear()

    if result['success']:
        if sector_task:
            sector_names = {
                SectorStatus.BAR: "–±–∞—Ä",
                SectorStatus.HALL: "–∑–∞–ª",
                SectorStatus.KITCHEN: "–∫—É—Ö–Ω—è"
            }
            sector_name = sector_names.get(sector_task, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–∫—Ç–æ—Ä")
            await callback_query.message.answer(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–µ–∫—Ç–æ—Ä—É: {sector_name}!")
        else:
            await callback_query.message.answer("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É!")
    else:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {result['message']}")


@create_task_router.message(StateFilter(CreateTask.waiting_for_deadline))
async def process_deadline_manual(message: Message, state: FSMContext):
    deadline_str = message.text.strip()

    try:
        deadline_dt = datetime.strptime(deadline_str, "%d.%m.%Y - %H:%M")
        from zoneinfo import ZoneInfo
        kemerovo_tz = ZoneInfo("Asia/Krasnoyarsk")
        deadline_dt = deadline_dt.replace(tzinfo=kemerovo_tz)
        await state.update_data(deadline=deadline_dt)

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 22:30")
        return

    task_data = await state.get_data()

    manager_id = task_data["manager_id"]
    executor_id = task_data.get("executor_id")
    sector_task = task_data.get("sector_task")
    title = task_data["title"]
    description = task_data["description"]

    result = await TaskService.create_new_task(
        manager_id=manager_id,
        executor_id=executor_id,
        title=title,
        description=description,
        deadline=deadline_dt,
        sector_task=sector_task
    )

    await state.clear()

    if result['success']:
        if sector_task:
            sector_names = {
                SectorStatus.BAR: "–±–∞—Ä",
                SectorStatus.HALL: "–∑–∞–ª",
                SectorStatus.KITCHEN: "–∫—É—Ö–Ω—è"
            }
            sector_name = sector_names.get(sector_task, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–∫—Ç–æ—Ä")
            await message.answer(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–µ–∫—Ç–æ—Ä—É: {sector_name}!")
        else:
            await message.answer("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É!")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: {result['message']}")